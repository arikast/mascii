# Autogenerated from a Treetop grammar. Edits may be lost.


module Mascii
  include Treetop::Runtime

  def root
    @root ||= :top
  end

  module Top0


    #def trigger_prop_timings        
    #  propagate_timings 0, 1920
    #  #propagate_timings 0, 1440
    #end
  end

  def _nt_top
    start_index = index
    if node_cache[:top].has_key?(index)
      cached = node_cache[:top][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_measures
    r0.extend(Top0)

    node_cache[:top][start_index] = r0

    r0
  end

  module FreeForm0
  end

  module FreeForm1


    def propagate_timings(context, time_start, time_length)
          split_measures context, time_start, time_length
    end
  end

  def _nt_free_form
    start_index = index
    if node_cache[:free_form].has_key?(index)
      cached = node_cache[:free_form][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      r3 = _nt_metaremarks
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r2
      if r2
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r4
        if r4
          s6, i6 = [], index
          loop do
            r7 = _nt_composite
            if r7
              s6 << r7
            else
              break
            end
          end
          if s6.empty?
            @index = i6
            r6 = nil
          else
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          end
          s1 << r6
          if r6
            r9 = _nt_space
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r8
          end
        end
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(FreeForm0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FreeForm1)
    end

    node_cache[:free_form][start_index] = r0

    r0
  end

  module Measures0
    def measure_node
      elements[0]
    end

  end

  module Measures1


    def propagate_timings(context, time_start, time_length)
          measure_node.split_measures context, time_start, time_length
    end
  end

  def _nt_measures
    start_index = index
    if node_cache[:measures].has_key?(index)
      cached = node_cache[:measures][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_measure
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      r4 = _nt_barline
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Measures0)
      r0.extend(Measures1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:measures][start_index] = r0

    r0
  end

  module Measure0
    def composites
      elements[0]
    end

  end

  module Measure1
    def composites
      elements[1]
    end
  end

  module Measure2
  end

  def _nt_measure
    start_index = index
    if node_cache[:measure].has_key?(index)
      cached = node_cache[:measure][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_empty_measure
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      r4 = _nt_metaremarks
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
      if r3
        r6 = _nt_space
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
        if r5
          i7 = index
          i8, s8 = index, []
          r9 = _nt_composites
          s8 << r9
          if r9
            r11 = _nt_space
            if r11
              r10 = r11
            else
              r10 = instantiate_node(SyntaxNode,input, index...index)
            end
            s8 << r10
            if r10
              r13 = _nt_barline
              if r13
                r12 = r13
              else
                r12 = instantiate_node(SyntaxNode,input, index...index)
              end
              s8 << r12
            end
          end
          if s8.last
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            r8.extend(Measure0)
          else
            @index = i8
            r8 = nil
          end
          if r8
            r7 = r8
          else
            i14, s14 = index, []
            r16 = _nt_barline
            if r16
              r15 = r16
            else
              r15 = instantiate_node(SyntaxNode,input, index...index)
            end
            s14 << r15
            if r15
              r17 = _nt_composites
              s14 << r17
            end
            if s14.last
              r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
              r14.extend(Measure1)
            else
              @index = i14
              r14 = nil
            end
            if r14
              r7 = r14
            else
              @index = i7
              r7 = nil
            end
          end
          s0 << r7
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Measure2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:measure][start_index] = r0

    r0
  end

  module EmptyMeasure0
    def barline
      elements[2]
    end

  end

  def _nt_empty_measure
    start_index = index
    if node_cache[:empty_measure].has_key?(index)
      cached = node_cache[:empty_measure][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_metaremarks
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r4 = _nt_space
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
      if r3
        r5 = _nt_barline
        s0 << r5
        if r5
          r7 = _nt_space
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r6
          if r6
            r9 = _nt_metaremarks
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r8
            if r8
              r11 = _nt_space
              if r11
                r10 = r11
              else
                r10 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r10
              if r10
                i12 = index
                r13 = _nt_barline
                if r13
                  @index = i12
                  r12 = instantiate_node(SyntaxNode,input, index...index)
                else
                  r12 = nil
                end
                s0 << r12
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(EmptyMeasure0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:empty_measure][start_index] = r0

    r0
  end

  def _nt_composites
    start_index = index
    if node_cache[:composites].has_key?(index)
      cached = node_cache[:composites][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_even_composites
    if r1
      r0 = r1
    else
      r2 = _nt_reverse_dotted_composites
      if r2
        r0 = r2
      else
        r3 = _nt_dotted_composites
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:composites][start_index] = r0

    r0
  end

  module EvenComposites0
  end

  module EvenComposites1
    def comps
      elements[1]
    end
  end

  module EvenComposites2


		def propagate_timings(context, time_start, time_length)
			comps.split_beat context, time_start, time_length, comps.elements.size
		end
  end

  def _nt_even_composites
    start_index = index
    if node_cache[:even_composites].has_key?(index)
      cached = node_cache[:even_composites][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          r6 = _nt_composite
          if r6
            s5 << r6
          else
            break
          end
        end
        if s5.empty?
          @index = i5
          r5 = nil
        else
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        end
        s4 << r5
        if r5
          r8 = _nt_space
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s4 << r7
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(EvenComposites0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(EvenComposites1)
      r0.extend(EvenComposites2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:even_composites][start_index] = r0

    r0
  end

  module DottedComposites0
  end

  module DottedComposites1
    def comps
      elements[1]
    end
  end

  module DottedComposites2


		def propagate_timings(context, time_start, time_length)
			comps.split_beat_dotted context, time_start, time_length, comps.elements.size
		end
  end

  def _nt_dotted_composites
    start_index = index
    if node_cache[:dotted_composites].has_key?(index)
      cached = node_cache[:dotted_composites][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          r6 = _nt_composite
          if r6
            s5 << r6
          else
            break
          end
        end
        if s5.empty?
          @index = i5
          r5 = nil
        else
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        end
        s4 << r5
        if r5
          r8 = _nt_space
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s4 << r7
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(DottedComposites0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(DottedComposites1)
      r0.extend(DottedComposites2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:dotted_composites][start_index] = r0

    r0
  end

  module ReverseDottedComposites0
  end

  module ReverseDottedComposites1
    def comps
      elements[1]
    end
  end

  module ReverseDottedComposites2


		def propagate_timings(context, time_start, time_length)
			comps.split_beat_reverse_dotted context, time_start, time_length, comps.elements.size
		end
  end

  def _nt_reverse_dotted_composites
    start_index = index
    if node_cache[:reverse_dotted_composites].has_key?(index)
      cached = node_cache[:reverse_dotted_composites][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          r6 = _nt_composite
          if r6
            s5 << r6
          else
            break
          end
        end
        if s5.empty?
          @index = i5
          r5 = nil
        else
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        end
        s4 << r5
        if r5
          r8 = _nt_space
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s4 << r7
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(ReverseDottedComposites0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ReverseDottedComposites1)
      r0.extend(ReverseDottedComposites2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:reverse_dotted_composites][start_index] = r0

    r0
  end

  def _nt_composite
    start_index = index
    if node_cache[:composite].has_key?(index)
      cached = node_cache[:composite][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_chord
    if r1
      r0 = r1
    else
      r2 = _nt_rest
      if r2
        r0 = r2
      else
        r3 = _nt_even_composite
        if r3
          r0 = r3
        else
          r4 = _nt_reverse_dotted_composite
          if r4
            r0 = r4
          else
            r5 = _nt_dotted_composite
            if r5
              r0 = r5
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end
    end

    node_cache[:composite][start_index] = r0

    r0
  end

  module EvenComposite0
  end

  def _nt_even_composite
    start_index = index
    if node_cache[:even_composite].has_key?(index)
      cached = node_cache[:even_composite][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_octave_designation
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if has_terminal?('(', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('(')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_octave_designation
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          r7 = _nt_even_composites
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r6
          if r6
            r9 = _nt_octave_designation
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r8
            if r8
              if has_terminal?(')', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(')')
                r10 = nil
              end
              s0 << r10
              if r10
                r12 = _nt_octave_designation
                if r12
                  r11 = r12
                else
                  r11 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r11
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(EvenCompositeNode,input, i0...index, s0)
      r0.extend(EvenComposite0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:even_composite][start_index] = r0

    r0
  end

  module DottedComposite0
  end

  def _nt_dotted_composite
    start_index = index
    if node_cache[:dotted_composite].has_key?(index)
      cached = node_cache[:dotted_composite][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_octave_designation
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if has_terminal?('[', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('[')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_octave_designation
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          r7 = _nt_dotted_composites
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r6
          if r6
            r9 = _nt_octave_designation
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r8
            if r8
              if has_terminal?(']', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(']')
                r10 = nil
              end
              s0 << r10
              if r10
                r12 = _nt_octave_designation
                if r12
                  r11 = r12
                else
                  r11 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r11
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(DottedCompositeNode,input, i0...index, s0)
      r0.extend(DottedComposite0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:dotted_composite][start_index] = r0

    r0
  end

  module ReverseDottedComposite0
  end

  def _nt_reverse_dotted_composite
    start_index = index
    if node_cache[:reverse_dotted_composite].has_key?(index)
      cached = node_cache[:reverse_dotted_composite][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_octave_designation
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if has_terminal?('~[', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('~[')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_octave_designation
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          r7 = _nt_reverse_dotted_composites
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r6
          if r6
            r9 = _nt_octave_designation
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r8
            if r8
              if has_terminal?(']', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(']')
                r10 = nil
              end
              s0 << r10
              if r10
                r12 = _nt_octave_designation
                if r12
                  r11 = r12
                else
                  r11 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r11
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(ReverseDottedCompositeNode,input, i0...index, s0)
      r0.extend(ReverseDottedComposite0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:reverse_dotted_composite][start_index] = r0

    r0
  end

  module Chord0
  end

  def _nt_chord
    start_index = index
    if node_cache[:chord].has_key?(index)
      cached = node_cache[:chord][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      r3 = _nt_octave_designation
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r2
      if r2
        i4 = index
        r5 = _nt_instachord_start
        if r5
          r4 = r5
        else
          r6 = _nt_instachord_end
          if r6
            r4 = r6
          else
            r7 = _nt_instachord
            if r7
              r4 = r7
            else
              r8 = _nt_note_start
              if r8
                r4 = r8
              else
                r9 = _nt_note_end
                if r9
                  r4 = r9
                else
                  r10 = _nt_note
                  if r10
                    r4 = r10
                  else
                    @index = i4
                    r4 = nil
                  end
                end
              end
            end
          end
        end
        s1 << r4
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(Chord0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(ChordNode,input, i0...index, s0)
    end

    node_cache[:chord][start_index] = r0

    r0
  end

  module Instachord0
    def instachord_bass
      elements[2]
    end
  end

  module Instachord1
    def instachord_type
      elements[0]
    end

  end

  module Instachord2
    def figures
      elements[1]
    end

  end

  module Instachord3
  end

  def _nt_instachord
    start_index = index
    if node_cache[:instachord].has_key?(index)
      cached = node_cache[:instachord][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[a-gA-G]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      r3 = _nt_accidental
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        i4 = index
        i5, s5 = index, []
        r7 = _nt_instachord_type
        if r7
          r6 = r7
        else
          r6 = instantiate_node(SyntaxNode,input, index...index)
        end
        s5 << r6
        if r6
          r9 = _nt_figures
          if r9
            r8 = r9
          else
            r8 = instantiate_node(SyntaxNode,input, index...index)
          end
          s5 << r8
          if r8
            r10 = _nt_instachord_bass
            s5 << r10
          end
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(Instachord0)
        else
          @index = i5
          r5 = nil
        end
        if r5
          r4 = r5
        else
          i11, s11 = index, []
          r12 = _nt_instachord_type
          s11 << r12
          if r12
            r14 = _nt_figures
            if r14
              r13 = r14
            else
              r13 = instantiate_node(SyntaxNode,input, index...index)
            end
            s11 << r13
          end
          if s11.last
            r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
            r11.extend(Instachord1)
          else
            @index = i11
            r11 = nil
          end
          if r11
            r4 = r11
          else
            i15, s15 = index, []
            r17 = _nt_instachord_type
            if r17
              r16 = r17
            else
              r16 = instantiate_node(SyntaxNode,input, index...index)
            end
            s15 << r16
            if r16
              r18 = _nt_figures
              s15 << r18
              if r18
                i19 = index
                r20 = _nt_note
                if r20
                  r19 = nil
                else
                  @index = i19
                  r19 = instantiate_node(SyntaxNode,input, index...index)
                end
                s15 << r19
              end
            end
            if s15.last
              r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
              r15.extend(Instachord2)
            else
              @index = i15
              r15 = nil
            end
            if r15
              r4 = r15
            else
              @index = i4
              r4 = nil
            end
          end
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(InstaChordNode,input, i0...index, s0)
      r0.extend(Instachord3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:instachord][start_index] = r0

    r0
  end

  module InstachordStart0
    def instachord_bass
      elements[2]
    end
  end

  module InstachordStart1
    def instachord_type
      elements[0]
    end

  end

  module InstachordStart2
    def figures
      elements[1]
    end

  end

  module InstachordStart3
  end

  def _nt_instachord_start
    start_index = index
    if node_cache[:instachord_start].has_key?(index)
      cached = node_cache[:instachord_start][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[a-gA-G]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      r3 = _nt_accidental
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        i4 = index
        i5, s5 = index, []
        r7 = _nt_instachord_type
        if r7
          r6 = r7
        else
          r6 = instantiate_node(SyntaxNode,input, index...index)
        end
        s5 << r6
        if r6
          r9 = _nt_figures
          if r9
            r8 = r9
          else
            r8 = instantiate_node(SyntaxNode,input, index...index)
          end
          s5 << r8
          if r8
            r10 = _nt_instachord_bass
            s5 << r10
          end
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(InstachordStart0)
        else
          @index = i5
          r5 = nil
        end
        if r5
          r4 = r5
        else
          i11, s11 = index, []
          r12 = _nt_instachord_type
          s11 << r12
          if r12
            r14 = _nt_figures
            if r14
              r13 = r14
            else
              r13 = instantiate_node(SyntaxNode,input, index...index)
            end
            s11 << r13
          end
          if s11.last
            r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
            r11.extend(InstachordStart1)
          else
            @index = i11
            r11 = nil
          end
          if r11
            r4 = r11
          else
            i15, s15 = index, []
            r17 = _nt_instachord_type
            if r17
              r16 = r17
            else
              r16 = instantiate_node(SyntaxNode,input, index...index)
            end
            s15 << r16
            if r16
              r18 = _nt_figures
              s15 << r18
              if r18
                i19 = index
                r20 = _nt_note
                if r20
                  r19 = nil
                else
                  @index = i19
                  r19 = instantiate_node(SyntaxNode,input, index...index)
                end
                s15 << r19
              end
            end
            if s15.last
              r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
              r15.extend(InstachordStart2)
            else
              @index = i15
              r15 = nil
            end
            if r15
              r4 = r15
            else
              @index = i4
              r4 = nil
            end
          end
        end
        s0 << r4
        if r4
          if has_terminal?('!', false, index)
            r21 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('!')
            r21 = nil
          end
          s0 << r21
        end
      end
    end
    if s0.last
      r0 = instantiate_node(InstaChordStartNode,input, i0...index, s0)
      r0.extend(InstachordStart3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:instachord_start][start_index] = r0

    r0
  end

  module InstachordEnd0
    def instachord_bass
      elements[2]
    end
  end

  module InstachordEnd1
    def instachord_type
      elements[0]
    end

  end

  module InstachordEnd2
    def figures
      elements[1]
    end

  end

  module InstachordEnd3
  end

  def _nt_instachord_end
    start_index = index
    if node_cache[:instachord_end].has_key?(index)
      cached = node_cache[:instachord_end][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[a-gA-G]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      r3 = _nt_accidental
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        i4 = index
        i5, s5 = index, []
        r7 = _nt_instachord_type
        if r7
          r6 = r7
        else
          r6 = instantiate_node(SyntaxNode,input, index...index)
        end
        s5 << r6
        if r6
          r9 = _nt_figures
          if r9
            r8 = r9
          else
            r8 = instantiate_node(SyntaxNode,input, index...index)
          end
          s5 << r8
          if r8
            r10 = _nt_instachord_bass
            s5 << r10
          end
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(InstachordEnd0)
        else
          @index = i5
          r5 = nil
        end
        if r5
          r4 = r5
        else
          i11, s11 = index, []
          r12 = _nt_instachord_type
          s11 << r12
          if r12
            r14 = _nt_figures
            if r14
              r13 = r14
            else
              r13 = instantiate_node(SyntaxNode,input, index...index)
            end
            s11 << r13
          end
          if s11.last
            r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
            r11.extend(InstachordEnd1)
          else
            @index = i11
            r11 = nil
          end
          if r11
            r4 = r11
          else
            i15, s15 = index, []
            r17 = _nt_instachord_type
            if r17
              r16 = r17
            else
              r16 = instantiate_node(SyntaxNode,input, index...index)
            end
            s15 << r16
            if r16
              r18 = _nt_figures
              s15 << r18
              if r18
                i19 = index
                r20 = _nt_note
                if r20
                  r19 = nil
                else
                  @index = i19
                  r19 = instantiate_node(SyntaxNode,input, index...index)
                end
                s15 << r19
              end
            end
            if s15.last
              r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
              r15.extend(InstachordEnd2)
            else
              @index = i15
              r15 = nil
            end
            if r15
              r4 = r15
            else
              @index = i4
              r4 = nil
            end
          end
        end
        s0 << r4
        if r4
          if has_terminal?('*', false, index)
            r21 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('*')
            r21 = nil
          end
          s0 << r21
        end
      end
    end
    if s0.last
      r0 = instantiate_node(InstaChordEndNode,input, i0...index, s0)
      r0.extend(InstachordEnd3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:instachord_end][start_index] = r0

    r0
  end

  module Figures0
  end

  def _nt_figures
    start_index = index
    if node_cache[:figures].has_key?(index)
      cached = node_cache[:figures][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      if has_terminal?('\G[0-9]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s1 << r2
      if r2
        r4 = _nt_accidental
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r3
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(Figures0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:figures][start_index] = r0

    r0
  end

  module InstachordType0
  end

  module InstachordType1
  end

  module InstachordType2
  end

  module InstachordType3
  end

  module InstachordType4
  end

  module InstachordType5
  end

  module InstachordType6
  end

  def _nt_instachord_type
    start_index = index
    if node_cache[:instachord_type].has_key?(index)
      cached = node_cache[:instachord_type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?(':', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(':')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i2, s2 = index, []
      if has_terminal?('\G[mM]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      s2 << r3
      if r3
        if has_terminal?('\G[iI]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        s2 << r4
        if r4
          if has_terminal?('\G[nN]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          s2 << r5
        end
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(InstachordType0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r0 = r2
      else
        i6, s6 = index, []
        if has_terminal?('\G[mM]', true, index)
          r7 = true
          @index += 1
        else
          r7 = nil
        end
        s6 << r7
        if r7
          if has_terminal?('\G[aA]', true, index)
            r8 = true
            @index += 1
          else
            r8 = nil
          end
          s6 << r8
          if r8
            if has_terminal?('\G[jJ]', true, index)
              r9 = true
              @index += 1
            else
              r9 = nil
            end
            s6 << r9
          end
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(InstachordType1)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r0 = r6
        else
          if has_terminal?('\G[mM]', true, index)
            r10 = true
            @index += 1
          else
            r10 = nil
          end
          if r10
            r0 = r10
          else
            i11, s11 = index, []
            if has_terminal?('\G[hH]', true, index)
              r12 = true
              @index += 1
            else
              r12 = nil
            end
            s11 << r12
            if r12
              if has_terminal?('\G[dD]', true, index)
                r13 = true
                @index += 1
              else
                r13 = nil
              end
              s11 << r13
              if r13
                if has_terminal?('\G[iI]', true, index)
                  r14 = true
                  @index += 1
                else
                  r14 = nil
                end
                s11 << r14
                if r14
                  if has_terminal?('\G[mM]', true, index)
                    r15 = true
                    @index += 1
                  else
                    r15 = nil
                  end
                  s11 << r15
                end
              end
            end
            if s11.last
              r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
              r11.extend(InstachordType2)
            else
              @index = i11
              r11 = nil
            end
            if r11
              r0 = r11
            else
              i16, s16 = index, []
              if has_terminal?('\G[dD]', true, index)
                r17 = true
                @index += 1
              else
                r17 = nil
              end
              s16 << r17
              if r17
                if has_terminal?('\G[iI]', true, index)
                  r18 = true
                  @index += 1
                else
                  r18 = nil
                end
                s16 << r18
                if r18
                  if has_terminal?('\G[mM]', true, index)
                    r19 = true
                    @index += 1
                  else
                    r19 = nil
                  end
                  s16 << r19
                end
              end
              if s16.last
                r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
                r16.extend(InstachordType3)
              else
                @index = i16
                r16 = nil
              end
              if r16
                r0 = r16
              else
                i20, s20 = index, []
                if has_terminal?('\G[dD]', true, index)
                  r21 = true
                  @index += 1
                else
                  r21 = nil
                end
                s20 << r21
                if r21
                  if has_terminal?('\G[oO]', true, index)
                    r22 = true
                    @index += 1
                  else
                    r22 = nil
                  end
                  s20 << r22
                  if r22
                    if has_terminal?('\G[mM]', true, index)
                      r23 = true
                      @index += 1
                    else
                      r23 = nil
                    end
                    s20 << r23
                  end
                end
                if s20.last
                  r20 = instantiate_node(SyntaxNode,input, i20...index, s20)
                  r20.extend(InstachordType4)
                else
                  @index = i20
                  r20 = nil
                end
                if r20
                  r0 = r20
                else
                  i24, s24 = index, []
                  if has_terminal?('\G[sS]', true, index)
                    r25 = true
                    @index += 1
                  else
                    r25 = nil
                  end
                  s24 << r25
                  if r25
                    if has_terminal?('\G[uU]', true, index)
                      r26 = true
                      @index += 1
                    else
                      r26 = nil
                    end
                    s24 << r26
                    if r26
                      if has_terminal?('\G[sS]', true, index)
                        r27 = true
                        @index += 1
                      else
                        r27 = nil
                      end
                      s24 << r27
                    end
                  end
                  if s24.last
                    r24 = instantiate_node(SyntaxNode,input, i24...index, s24)
                    r24.extend(InstachordType5)
                  else
                    @index = i24
                    r24 = nil
                  end
                  if r24
                    r0 = r24
                  else
                    i28, s28 = index, []
                    if has_terminal?('\G[aA]', true, index)
                      r29 = true
                      @index += 1
                    else
                      r29 = nil
                    end
                    s28 << r29
                    if r29
                      if has_terminal?('\G[uU]', true, index)
                        r30 = true
                        @index += 1
                      else
                        r30 = nil
                      end
                      s28 << r30
                      if r30
                        if has_terminal?('\G[gG]', true, index)
                          r31 = true
                          @index += 1
                        else
                          r31 = nil
                        end
                        s28 << r31
                      end
                    end
                    if s28.last
                      r28 = instantiate_node(SyntaxNode,input, i28...index, s28)
                      r28.extend(InstachordType6)
                    else
                      @index = i28
                      r28 = nil
                    end
                    if r28
                      r0 = r28
                    else
                      @index = i0
                      r0 = nil
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:instachord_type][start_index] = r0

    r0
  end

  module InstachordBass0
  end

  def _nt_instachord_bass
    start_index = index
    if node_cache[:instachord_bass].has_key?(index)
      cached = node_cache[:instachord_bass][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('/', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('/')
      r1 = nil
    end
    s0 << r1
    if r1
      r3 = _nt_octave_designation
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        if has_terminal?('\G[a-gA-G]', true, index)
          r5 = true
          @index += 1
        else
          r5 = nil
        end
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          r7 = _nt_accidental
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r6
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(InstachordBass0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:instachord_bass][start_index] = r0

    r0
  end

  module Note0
  end

  def _nt_note
    start_index = index
    if node_cache[:note].has_key?(index)
      cached = node_cache[:note][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[a-gA-GxX]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      r3 = _nt_accidental
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(NoteNode,input, i0...index, s0)
      r0.extend(Note0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:note][start_index] = r0

    r0
  end

  module NoteStart0
  end

  def _nt_note_start
    start_index = index
    if node_cache[:note_start].has_key?(index)
      cached = node_cache[:note_start][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[a-gA-GxX]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      r3 = _nt_accidental
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        if has_terminal?('!', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('!')
          r4 = nil
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(NoteStartNode,input, i0...index, s0)
      r0.extend(NoteStart0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:note_start][start_index] = r0

    r0
  end

  module NoteEnd0
  end

  def _nt_note_end
    start_index = index
    if node_cache[:note_end].has_key?(index)
      cached = node_cache[:note_end][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[a-gA-GxX]', true, index)
      r2 = true
      @index += 1
    else
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r4 = _nt_accidental
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
      if r3
        if has_terminal?('*', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('*')
          r5 = nil
        end
        s0 << r5
      end
    end
    if s0.last
      r0 = instantiate_node(NoteEndNode,input, i0...index, s0)
      r0.extend(NoteEnd0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:note_end][start_index] = r0

    r0
  end

  def _nt_accidental
    start_index = index
    if node_cache[:accidental].has_key?(index)
      cached = node_cache[:accidental][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if has_terminal?('=', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('=')
        r2 = nil
      end
      if r2
        r1 = r2
      else
        if has_terminal?('+', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('+')
          r3 = nil
        end
        if r3
          r1 = r3
        else
          if has_terminal?('-', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('-')
            r4 = nil
          end
          if r4
            r1 = r4
          else
            @index = i1
            r1 = nil
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:accidental][start_index] = r0

    r0
  end

  def _nt_octave_designation
    start_index = index
    if node_cache[:octave_designation].has_key?(index)
      cached = node_cache[:octave_designation][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_octave
    if r1
      r0 = r1
    else
      r2 = _nt_octave_shift
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:octave_designation][start_index] = r0

    r0
  end

  def _nt_octave
    start_index = index
    if node_cache[:octave].has_key?(index)
      cached = node_cache[:octave][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[0-9]', true, index)
      r0 = instantiate_node(OctaveNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:octave][start_index] = r0

    r0
  end

  def _nt_octave_shift
    start_index = index
    if node_cache[:octave_shift].has_key?(index)
      cached = node_cache[:octave_shift][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if has_terminal?('<', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('<')
        r2 = nil
      end
      if r2
        r1 = r2
      else
        if has_terminal?('>', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('>')
          r3 = nil
        end
        if r3
          r1 = r3
        else
          if has_terminal?('o', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('o')
            r4 = nil
          end
          if r4
            r1 = r4
          else
            if has_terminal?('O', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('O')
              r5 = nil
            end
            if r5
              r1 = r5
            else
              @index = i1
              r1 = nil
            end
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(OctaveShiftNode,input, i0...index, s0)
    end

    node_cache[:octave_shift][start_index] = r0

    r0
  end

  module Rest0
  end

  def _nt_rest
    start_index = index
    if node_cache[:rest].has_key?(index)
      cached = node_cache[:rest][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_octave_designation
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if has_terminal?('.', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('.')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_octave_designation
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Rest0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:rest][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if has_terminal?(' ', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(' ')
        r2 = nil
      end
      if r2
        r1 = r2
      else
        if has_terminal?('	', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('	')
          r3 = nil
        end
        if r3
          r1 = r3
        else
          if has_terminal?('_', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('_')
            r4 = nil
          end
          if r4
            r1 = r4
          else
            @index = i1
            r1 = nil
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:space][start_index] = r0

    r0
  end

  module Barline0
  end

  def _nt_barline
    start_index = index
    if node_cache[:barline].has_key?(index)
      cached = node_cache[:barline][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r4 = _nt_octave_designation
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
      if r3
        if has_terminal?('|', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('|')
          r5 = nil
        end
        s0 << r5
        if r5
          r7 = _nt_octave_designation
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r6
          if r6
            r9 = _nt_space
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r8
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(BarlineNode,input, i0...index, s0)
      r0.extend(Barline0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:barline][start_index] = r0

    r0
  end

  module Metaremarks0
    def metaremark
      elements[1]
    end

  end

  def _nt_metaremarks
    start_index = index
    if node_cache[:metaremarks].has_key?(index)
      cached = node_cache[:metaremarks][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      if has_terminal?('"', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('"')
        r2 = nil
      end
      s1 << r2
      if r2
        r3 = _nt_metaremark
        s1 << r3
        if r3
          if has_terminal?('"', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('"')
            r4 = nil
          end
          s1 << r4
          if r4
            r6 = _nt_space
            if r6
              r5 = r6
            else
              r5 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r5
          end
        end
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(Metaremarks0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:metaremarks][start_index] = r0

    r0
  end

  def _nt_metaremark
    start_index = index
    if node_cache[:metaremark].has_key?(index)
      cached = node_cache[:metaremark][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_metaremark_char
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(MetaRemarkNode,input, i0...index, s0)

    node_cache[:metaremark][start_index] = r0

    r0
  end

  module MetaremarkChar0
  end

  def _nt_metaremark_char
    start_index = index
    if node_cache[:metaremark_char].has_key?(index)
      cached = node_cache[:metaremark_char][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('"', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('"')
      r2 = nil
    end
    if r2
      r1 = nil
    else
      @index = i1
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if index < input_length
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("any character")
        r3 = nil
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(MetaremarkChar0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:metaremark_char][start_index] = r0

    r0
  end

end

class MasciiParser < Treetop::Runtime::CompiledParser
  include Mascii
end

